{"version":3,"sources":["components/Forecast/Forecast.module.scss","components/Weather/Weather.module.scss","components/Search/Search.module.scss","components/Location/Location.module.scss","components/DateData/DateData.module.scss","assets/useSearch.svg","components/Footer/Footer.module.scss","context.js","components/API/api.js","components/Search/Search.js","components/DateData/DateData.js","components/Location/Location.js","components/Forecast/Forecast.js","components/Weather/Weather.js","components/Footer/Footer.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Context","React","createContext","api","Search","key","http","https","baseUrl","window","location","protocol","useContext","query","setQuery","setWeather","className","s","search","type","search__bar","placeholder","onChange","target","value","onKeyPress","evt","fetch","then","res","json","result","error","catch","err","console","DateData","date","currentDay","getDay","currentDate","getDate","currentMonth","getMonth","currentYear","getFullYear","dateBuilder","Date","Location","weather","location__city","data","name","country","message","chosenLocation","Forecast","forecast","forecastday","day1","day2","day3","weather__forecastDayly","map","dayData","day","condition","icon","text","avgtemp_c","maxtemp_c","mintemp_c","daily_chance_of_rain","daily_chance_of_snow","split","month","weather__dayly","join","weather__day","weather__wrapper","weather__main","weather__icon","src","alt","weather__temperature","Math","floor","weather__info","max","weather__descr","Weather","current","temp_c","feelslike_c","wind_kph","humidity","useSearch","weather__useSearch","Footer","footer","href","title","App","useState","Provider","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.6b3963b6.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"weather\":\"Forecast_weather__15pfU\",\"weather__wrapper\":\"Forecast_weather__wrapper__1kkeY\",\"weather__main\":\"Forecast_weather__main__1duAt\",\"weather__icon\":\"Forecast_weather__icon__3tbXf\",\"weather__temperature\":\"Forecast_weather__temperature__1nfoS\",\"weather__info\":\"Forecast_weather__info__Xbph9\",\"weather__descr\":\"Forecast_weather__descr__3e_hn\",\"weather__forecastDayly\":\"Forecast_weather__forecastDayly__m3a61\",\"weather__useSearch\":\"Forecast_weather__useSearch__xrd6z\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"weather\":\"Weather_weather__2lx7H\",\"weather__wrapper\":\"Weather_weather__wrapper__1U_gK\",\"weather__main\":\"Weather_weather__main__IA5Kd\",\"weather__icon\":\"Weather_weather__icon__3vPch\",\"weather__temperature\":\"Weather_weather__temperature__3v-PD\",\"weather__info\":\"Weather_weather__info__2VPLO\",\"weather__descr\":\"Weather_weather__descr__2ocoq\",\"weather__forecastDayly\":\"Weather_weather__forecastDayly__2ZXTI\",\"weather__useSearch\":\"Weather_weather__useSearch__1rShd\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"search\":\"Search_search__3Q-BZ\",\"search__bar\":\"Search_search__bar__2Q6Q3\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"location\":\"Location_location__19mfv\",\"location__city\":\"Location_location__city__2ut4m\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"date\":\"DateData_date__2dZAx\"};","module.exports = __webpack_public_path__ + \"static/media/useSearch.74370baf.svg\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"footer\":\"Footer_footer__7dIj9\"};","import React from 'react'\n\nexport const Context = React.createContext();\n","export const api = {\n  key: 'a092fcaf830d4247a90130159202306',\n  http: 'http://api.weatherapi.com/v1/forecast.json?',\n  https: 'https://api.weatherapi.com/v1/forecast.json?',\n}\n","import React, { useContext } from 'react';\nimport { Context } from '../../context';\nimport { api } from '../API/api';\nimport s from './Search.module.scss';\n\nexport const Search = () => {\n  const { key , http, https } = api;\n  const { protocol } = window.location;\n  const baseUrl = protocol === 'http:' ? http : https;\n  const { query, setQuery, setWeather } = useContext(Context);\n\n  const search = (evt) => {\n    if (evt.key === 'Enter' && query !== '') {\n      fetch(`${baseUrl}key=${key}&q=${query}&lang=ru&days=3`)\n      .then((res) => res.json())\n      .then((result) => {\n          setWeather(result);\n          if (!result.error) {\n            setQuery('');\n          }\n        })\n        .catch((err) => {\n          console.error(err)\n        })\n    }\n  }\n\n  return (\n    <div className={s.search}>\n      <input \n        type=\"text\"\n        className={s.search__bar}\n        placeholder=\"Search...\"\n        onChange={({ target }) => setQuery(target.value)}\n        value={query}\n        onKeyPress={search}\n      />\n    </div>\n  );\n};\n\n","import React from 'react';\nimport s from './DateData.module.scss';\n\n\nexport const DateData = () => {\n  const dateBuilder = (date) => {\n    const months = ['Январь', 'Февраль', 'Март', 'Апрель', 'Май', 'Июнь', 'Июль', 'Август', 'Сентябрь', 'Октябрь', 'Ноябрь', 'Декабрь'];\n    const days = ['Воскресенье', 'Понедельник', 'Вторник', 'Среда', 'Четверг', 'Пятница', 'Суббота'];\n\n    const currentDay = days[date.getDay()];\n    const currentDate = date.getDate();\n    const currentMonth = months[date.getMonth()];\n    const currentYear = date.getFullYear();\n\n    return `${currentDay} ${currentDate} ${currentMonth} ${currentYear}`;\n  };\n\n  return (\n    <div className={s.date}>{dateBuilder(new Date())}</div>\n  );\n};\n","import React, { useContext } from 'react';\nimport { Context } from '../../context';\nimport { DateData } from '../DateData/DateData';\nimport s from './Location.module.scss';\n\n\nexport const Location = () => {\n  const { weather } = useContext(Context);\n\n  const chosenLocation = (data) => {\n    if (data.location) {\n      const { name, country } = data.location\n      return `${name}, ${country}`\n    } else if (data.error) {\n      return `${data.error.message}`\n    }\n    return 'Воспользуйтесь поиском, чтобы получить информацию о погоде';\n  }\n\n\n  return (\n    <div className={s.location}>\n      <div className={s.location__city}>\n        {chosenLocation(weather)}\n      </div>\n      <DateData/>\n    </div>\n  );\n};\n","import React, { useContext } from 'react';\nimport { Context } from '../../context';\nimport s from './Forecast.module.scss';\n\n\nexport const Forecast = () => {\n  const { weather } = useContext(Context);\n  const [day1, day2, day3] = weather.forecast.forecastday;\n\n  const daylyMap = (dayData) => {\n    const { icon, text } = dayData.day.condition;\n    const { avgtemp_c, maxtemp_c, mintemp_c, daily_chance_of_rain, daily_chance_of_snow } =  dayData.day;\n    const { date } = dayData;\n    const [, month, day] = date.split('-');\n\n    return (\n      <div className={[s.weather, s.weather__dayly].join(' ')} key={`${day}${month}`}>\n          <div className={s.weather__day}>{`${day} / ${month}`}</div>\n        <div className={s.weather__wrapper}>\n          <div className={s.weather__main}>\n            <img className={s.weather__icon} src={`http:${icon}`} alt={`${day} ${month} weather icon`}/>\n            <div className={s.weather__temperature}>{Math.floor(avgtemp_c)}&deg;C</div>\n          </div>\n          <div className={s.weather__info}>\n            <div>Мин: {Math.floor(mintemp_c)}&deg;C</div>\n            <div>Макс: {Math.floor(maxtemp_c)}&deg;C</div>\n            <div>{`Осадки: ${Math.max(daily_chance_of_rain, daily_chance_of_snow)}%`}</div>\n          </div>\n        </div>\n        <div className={s.weather__descr}><div>{text}</div></div> \n      </div>\n    )\n  };\n\n  return (\n    <div className={s.weather__forecastDayly}>\n      {[day1, day2, day3].map(daylyMap)}\n    </div>\n  )\n}","import React, { useContext } from 'react';\nimport { Context } from '../../context';\nimport { Forecast } from '../Forecast/Forecast';\nimport s from './Weather.module.scss';\nimport useSearch from '../../assets/useSearch.svg';\n\n\nexport const Weather = () => {\n  const { weather } = useContext(Context);\n  if (weather.current) {\n    const { temp_c, feelslike_c, wind_kph, humidity } = weather.current;\n    const { icon, text } = weather.current.condition;\n    \n    return (\n      <>\n        <div className={s.weather}>\n        <div className={s.weather__wrapper}>\n          <div className={s.weather__main}>\n            <img className={s.weather__icon} src={`http:${icon}`} alt=\"Current weather icon\"/>\n            <div className={s.weather__temperature}>{Math.floor(temp_c)}&deg;C</div>\n          </div>\n          <div className={s.weather__info}>\n            <div>{`Ощущается как ${Math.floor(feelslike_c)}`}&deg;C</div>\n            <div>{`Ветер ${wind_kph} км/ч`}</div>\n            <div>{`Влажность ${humidity}%`}</div>\n          </div>\n        </div>\n        <div className={s.weather__descr}><div>{text}</div></div> \n        </div>\n        <hr/>\n        <Forecast/>\n      </>\n    );\n  }\n\n  return (\n    <div className={s.weather}>\n      <img src={useSearch} alt=\"Use search icon\" className={s.weather__useSearch}/>\n    </div>\n  );\n};\n","import React from 'react';\nimport s from './Footer.module.scss';\n\nexport const Footer = () => {\n  return (\n    <footer className={s.footer}>\n      <p>\n        Developed by: <a href=\"https://zgennadiy.com/\" target=\"_blanc\" title=\"Developer website\">Zgennadiy.com</a> \n      </p>\n      <p>\n        Powered by <a href=\"https://www.weatherapi.com/\" target=\"_blanc\" title=\"Free Weather API\">WeatherAPI.com</a>\n      </p>\n    </footer>\n  )\n};","import React,  { useState } from 'react';\nimport { Context } from './context';\nimport { Search } from './components/Search/Search';\nimport { Location } from './components/Location/Location';\nimport { Weather } from './components/Weather/Weather';\nimport { Footer } from './components/Footer/Footer';\n\n\nfunction App() {\n  const [query, setQuery] = useState('');\n  const [weather, setWeather] = useState({});\n\n  return (\n    <Context.Provider value={{query, setQuery, weather, setWeather}}>\n      <div className=\"App\">\n        <main>\n          <Search/>\n          <Location/>\n          <Weather/>\n        </main>\n        <Footer/>\n      </div>\n    </Context.Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'normalize.css';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}